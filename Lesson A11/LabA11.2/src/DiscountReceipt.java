/**
 * Simulates the receipt of discounted items generated by a clerk
 * @author Richard Huang
 */
public class DiscountReceipt extends GroceryReceipt{
	private boolean preferred;
	private int discountCount;
	private double discountAmount;
	
	/**
	 * Initializes the clerk to the passed in employee,
	 * the receipt to an empty string, total, internalDiscount to 0
	 * and the preferred flag to the passed in value
	 * @param clerk - employee generating this receipt
	 * @param preferred - true if the receipt is for a preferred customer,
	 * 					  false otherwise. Only preferred customers would
	 * 					  get a discount.
	 */
	public DiscountReceipt(Employee c,boolean p){
		super(c);
		preferred=p;
		receipt="";
		total=discountAmount=discountCount=0;
	}
	
	/**
	 * Returns the list of items
	 * @return receipt
	 */
	public String getReceipt(){
		return super.getReceipt();
	}
	
	/**
	 * Returns the clerk generating the information
	 * @return clerk 
	 */
	public Employee getClerk(){
		return super.getClerk();
	}
	/**
     * Returns the number of discounted items
     * @return discount count
     */
	public int getDiscountCount() {
		return discountCount;
	}
    /**
     * Returns the total discounted amount
     * @return total discounted amount
     */
	public double getDiscountAmount() {
		return discountAmount;
	}
	/**
     * If the receipt is for a preferred customer and the item is discounted,
     * updates the discount count and the discount amount. Then it adds the item
     * to the receipt
     */
	@Override
	public void add(Item i) {
		super.add(i);
		if(preferred&&i.getDiscount()>0){
			discountAmount+=i.getDiscount();
			discountCount++;
		}
	}
	
	/**
	 * Returns the net price after discount
	 * @return net price after discount
	 */
	public double getTotal(){
		return super.getTotal()-discountAmount;
	}
	
	/**
     * Calculates and returns the percent discount
     * @return discount percent
     */
	public double getDiscountPercent(){
		return 100*discountAmount/super.getTotal();
	}
	
	/**
	 * Returns a string with list of items (one per line), total receipt amount, total
	 * discount amount, number of discounted items, percent discount and total amount 
	 * after discount
	 * @return a string of list of items with discounted price information
	 */
	public String toString(){
		return receipt+"\nSub-Total: $"+super.getTotal()+"\nDiscount: $"+super.valueToString(getDiscountAmount())+"\nNumber of discounted items: "+getDiscountCount()+"\nDiscount percent: "+super.valueToString(getDiscountPercent())+"%\nTotal: $"+super.valueToString(getTotal());
	}
}
